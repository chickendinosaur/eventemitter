{
    "project": {},
    "files": {
        "src\\Event.js": {
            "name": "src\\Event.js",
            "modules": {},
            "classes": {
                "Event": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\EventEmitter.js": {
            "name": "src\\EventEmitter.js",
            "modules": {},
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Event.js",
            "line": 28,
            "example": [
                " \nimport Event from '@chickendinosaur/eventemitter/Event';\n\nconst pauseEvent = new Event('pause');\npauseEvent.target = window || this;\n\npauseEvent.dispose();\n\npauseEvent.init('pause');\npauseEvent.target = window || this;"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String|number"
                }
            ]
        },
        "EventEmitter": {
            "name": "EventEmitter",
            "shortname": "EventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\EventEmitter.js",
            "line": 28,
            "example": [
                "\nimport EventEmitter from '@chickendinosaur/eventemitter';\nimport Event from '@chickendinosaur/eventemitter/Event';\n\nclass ComicEvent extends Event{\n    constructor(type) {\n        super(type);\n\n        this.superhero = 'The Nameless Man';\n        this.sidekick = null;\n    }\n}\n     \nconst eventemitter = new EventEmitter();\n  \nconst comicEvent = new ComicEvent('comic');\ncomicEvent.superhero = 'Batman';  \ncomicEvent.sidekick = 'Robin';\n\neventemitter.addEventListener('bang', function(e) {\n    console.log(`Callback scope: ${this}`);\n    console.log(`Event: ${e.type}`);\n    console.log(`${e.superhero} (POW!), ${e.sidekick} (BOOM!)`);\n});\n\nconsole.log(`Listener count: ${eventemitter.getEventListenerCount('comic')}`);\n\n// triggerEvent is meant to take an Event object which should be extended\n// for a custom event or at least contain a 'type' property.\n\neventemitter.triggerEvent(ev);\neventemitter.removeAllEventListeners('bang');\neventemitter.triggerEvent(ev);"
            ],
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\Event.js",
            "line": 1,
            "license": "The MIT License (MIT)\n\nCopyright (c) 2016 John Pittman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "class": "Event"
        },
        {
            "file": "src\\Event.js",
            "line": 45,
            "itemtype": "property",
            "name": "type",
            "type": "{string|number}",
            "class": "Event"
        },
        {
            "file": "src\\Event.js",
            "line": 51,
            "itemtype": "property",
            "name": "target",
            "type": "{object}",
            "class": "Event"
        },
        {
            "file": "src\\Event.js",
            "line": 60,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "class": "Event"
        },
        {
            "file": "src\\Event.js",
            "line": 68,
            "itemtype": "method",
            "name": "dispose",
            "class": "Event"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 1,
            "license": "The MIT License (MIT)\n\nCopyright (c) 2016 John Pittman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 67,
            "description": "Contains event keys mapped to listeners.",
            "itemtype": "property",
            "name": "_eventListeners",
            "type": "{object}",
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 75,
            "itemtype": "property",
            "name": "_eventCallbacks",
            "type": "{array}",
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 84,
            "description": "Execute all event listeners tied to the emitted event type.",
            "itemtype": "method",
            "name": "triggerEvent",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event|object"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 120,
            "description": "Adds a single event callback to the listeners container of the event type.\nCreates and new callbacks container (array) if there has not been any callbacks added to the event yet.",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 146,
            "description": "Alias of addEventListener.",
            "itemtype": "method",
            "name": "on",
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 153,
            "description": "Removes a single callback from the listener container of the event type.",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String|number"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 185,
            "description": "Removes all listeners from a single event.",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "- Event name.",
                    "type": "String"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 209,
            "description": "Access the number of listeners for an event.",
            "itemtype": "method",
            "name": "getEventListenerCount",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 233,
            "itemtype": "method",
            "name": "_addEventCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 245,
            "itemtype": "method",
            "name": "_removeEventCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 263,
            "itemtype": "method",
            "name": "_removeAllEventCallbacks",
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 274,
            "itemtype": "method",
            "name": "_getEventCallbackCount",
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 287,
            "description": "Used for object pooling.",
            "itemtype": "method",
            "name": "init",
            "class": "EventEmitter"
        },
        {
            "file": "src\\EventEmitter.js",
            "line": 296,
            "description": "Used for object pooling.",
            "itemtype": "method",
            "name": "dispose",
            "class": "EventEmitter"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " src\\Event.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src\\EventEmitter.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src\\Event.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src\\EventEmitter.js:1"
        }
    ]
}